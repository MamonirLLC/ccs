name: Package release 

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Sqa tag passed"
        required: true

env:
  package_url: "https://coreupdate-ro.central.arubanetworks.com/packages/app"
  app_id: "b18b554b-c777-4fc6-bfe7-19e511e6074d"
  ARTIFACTS_SERVER_USER: esroot
  ARTIFACTS_SERVER: 10.14.144.19
  

jobs:
  check-rc-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: get rc build number 
        run: |  
          git fetch --tags
          latest_rc_tag=$(git tag --sort=committerdate | tail -1 || echo "error")
          echo "latest_rc_tag: $latest_rc_tag"
          if [ "$latest_rc_tag" != "error" ] && [ -n "$latest_rc_tag" ]; then
            current_rc_number=$(echo "$latest_rc_tag" | sed -n 's/^.*-rc\([^.]*\)\..*$/\1/p')
            echo "rc_number=$(expr $current_rc_number + 1)"  >> $GITHUB_ENV 
          else
            echo "Latest RC Tag is empty or not found."
            echo "rc_number=1" >> $GITHUB_ENV 
          fi
    outputs:
      rc_build_number: ${{ env.rc_number }}
      
  get-tag-version:
    runs-on: ubuntu-latest
    needs: check-rc-build
    steps:
      - name: create release branch name and tag
        run: |
          major_version=$(echo "${{ inputs.tag }}" | cut -d'.' -f1)
          minor_version=$(echo "$${{ inputs.tag }}" | cut -d'.' -f2)
          full_version=$(echo "${{ inputs.tag }}" | cut -d'-' -f1)
          echo "release_branch_name=Release/v$major_version.$minor_version" >> $GITHUB_ENV 
          echo "release_tag=v$full_version-rc${{ needs.check-rc-build.outputs.rc_build_number }}.${{ github.run_number }}" >> $GITHUB_ENV 
          echo "major_version:$major_version minor_version:$minor_version  full_version:$full_version  release_branch_name:$release_branch_name release_tag:$release_tag"
    outputs:
      release_branch_name: ${{ env.release_branch_name }}
      release_tag: ${{ env.release_tag }}
      
  release-package:
    runs-on: ubuntu-latest
    needs: get-tag-version 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Create release branch from tag
        run: |
           echo "a: ${{ needs.get-tag-version.outputs.release_branch_name }} b: ${{ needs.get-tag-version.outputs.release_tag }}"
           git checkout -b ${{ needs.get-tag-version.outputs.release_branch_name }}
           git push origin ${{ needs.get-tag-version.outputs.release_branch_name }}

      
      - name: Create release tag
        run: |
          git tag ${{ needs.get-tag-version.outputs.release_tag }}
          git push origin ${{ needs.get-tag-version.outputs.release_tag }}
          
  copy-artifact:
    runs-on: ubuntu-latest
    needs: release-package
    steps:
      - name: Copy artifacts 
        run: | 
          list_packages=$(curl --silent "${{ env.package_url }}/${{ env.app_id }}/"|grep -A 1 "1.0.0-manifest-golden-61"|sed -n '2s/<td>\(.*\)<\/td>/\1/p')
          if [ -n "$list_packages" ]; then
                  location=$(curl -s "$list_packages"| yq ".golden[].location")
                  if [ -n "$location" ]; then
                    echo $location
                    ssh ${{ env.ARTIFACTS_SERVER_USER }}@${{ env.ARTIFACTS_SERVER }} \
                      " \
                        cp $location/* ${{ env.release_folder }};"  
                  else
                      echo "Error: Onprem-apps-pkg artifact path not found in manifest file."
                      exit 1
                  fi
          fi
          
# curl -s $list_packages|yq '.packages' -oc|grep "onprem-apps-pkg"| awk -F, '{print $3}'
